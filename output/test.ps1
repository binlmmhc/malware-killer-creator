#**************************************************Common Functons For All**************************************************
$sha256 = New-Object System.Security.Cryptography.SHA256Managed
Function hash_and_compare($file_path, $compare_hash){ 
    Try{ 
        if(Test-Path -Path "$file_path" -ErrorAction SilentlyContinue){ 
            $hashdata = [System.IO.File]::Open($file_path, "open", "read")
        }

        if($hashdata){ 
            $calchash = ""
            ForEach($i in $sha256.ComputeHash($hashdata) | ForEach-Object {$_.ToString("x2")}){
                $calchash += $i 
            }
            #$file_path + " " + $calchash | Out-Host

            $hashdata.dispose()
            
            if($calchash.ToUpper() -eq $compare_hash.ToUpper()){ 
                return $TRUE
            }
        }        
    }
    Catch{ 
        Write-Host "[-]Something Wrong while sha256 hash Matching." -BackgroundColor Black -ForegroundColor Red
        return $FALSE
    }
}
#**************************************************Common Functons End Line**************************************************

#**************************************************Deleted malicious schedule task by powershell!**************************************************
$deleted_schedule_task_by_namepath = $True
$malicious_task_namepaths = (
   "test taskname 1"
)
#deleted schedule tasks by task name with path
if($deleted_schedule_task_by_namepath){ 
    $task_root = "C:\Windows\System32\Tasks"

    ForEach($malicious_task in $malicious_task_namepaths){ 
        $malicious_task_path = $task_root+"\"+$malicious_task
        if(Test-Path -Path $malicious_task_path){ 
            schtasks /Delete /TN $malicious_task /F
            Write-Host "[+] Delete malicious task $malicious_task_path succesfully." -ForegroundColor Green -BackgroundColor Black
        }
    }

}

$deleted_schedule_task_by_action_command = $True
$malicious_task_commands = (
   "powershell*nop*bypass*-e"
)
if($deleted_schedule_task_by_action_command){ 
    $task_root = "C:\Windows\System32\Tasks"
    $task_files = Get-ChildItem -Path $task_root -Recurse

    ForEach($task_file in $task_files){
        ForEach($malicious_task_command in $malicious_task_commands){
            if($task_file.GetType().Name -eq "FileInfo"){ 
                $task_file_data = [XML](Get-Content $task_file.FullName)
                $task_execute_command = $task_file_data.Task.Actions.Exec.Command + " " + $task_file_data.Task.Actions.Exec.Arguments
                $command_match = $task_execute_command -like "*"+$malicious_task_command+"*"
                if($command_match){ 
                    $task_name = $task_file.Parent + "\" + $task_file.BaseName
                    if(Test-Path -Path ($task_root + "\" + $task_name)){ 
                        schtasks /Delete /TN $task_name /F
                        Write-Host "[+] Delete malicious task $task_name succesfully." -ForegroundColor Green -BackgroundColor Black
                    }
                }
            }
        }
    }
}
$deleted_schedule_task_by_execute_file_sha256 = $True
$malicious_task_execute_file_hashs = (
   "807126CBAE47C03C99590D081B82D5761E0B9C57A92736FC8516CF41BC564A7D"
)
#deleted schedule tasks by execute file sha256 hash
if($deleted_schedule_task_by_execute_file_sha256){ 

    $task_root = "C:\Windows\System32\Tasks"
    $task_files = Get-ChildItem -Path $task_root -Recurse

    ForEach($task_file in $task_files){
        ForEach($malicious_task_file_hash in $malicious_task_execute_file_hashs){
            if($task_file.GetType().Name -eq "FileInfo"){ 
                $task_file_data = [XML](Get-Content $task_file.FullName)
                $task_execute_command = $task_file_data.Task.Actions.Exec.Command

                if($task_execute_command -like '"*"'){
                    $task_execute_command = $task_execute_command.Replace('"', "")
                }

                if($task_execute_command -like "%*%*"){ 
                    $task_execute_command = [System.Environment]::ExpandEnvironmentVariables($task_execute_command)
                }

                if($task_execute_command){ 
                    if(hash_and_compare -file_path $task_execute_command -compare_hash $malicious_task_file_hash){ 
                        $task_name = $task_file.Parent + "\" + $task_file.BaseName
                        if(Test-Path -Path ($task_root + "\" + $task_name)){ 
                            schtasks /Delete /TN $task_name /F
                            Write-Host "[+] Delete malicious task $malicious_task_path succesfully." -ForegroundColor Green -BackgroundColor Black
                        }
                        if(Test-Path -Path $task_execute_command){ 
                            Remove-Item -Path $task_execute_command -Confirm:$False
                            Write-Host "[+] Delete malicious task executable file $task_execute_command successfully." -ForegroundColor Green -BackgroundColor Black
                        }
                    }
                }
            }
        }
    }
}
#**************************************************Deleted Schedule Tasks End Line**************************************************


#**************************************************Deleted malicious services by powershell!**************************************************
$delete_service_by_service_name = $true
$malicious_service_names = (
   "fake_service_name1"
)
#delete service by service name, and service name is not displayname
if($delete_service_by_service_name){ 
    Try{ 
        ForEach($malicious_service_name in $malicious_service_names){ 
            $find_service = Get-Service -Name $malicious_service_name -ErrorAction SilentlyContinue
            if($find_service){ 
                if($find_service.Status -eq "Running"){ 
                   if($find_service.CanStop){ 
                       $find_service.Stop()
                   }
                }
                $find_service.Dispose()
                sc.exe delete $malicious_service_names | Out-Null
            }
        }
    }
    Catch{ 
        Write-Host "[-] Some thing wrong while delete service by service name." -BackgroundColor Black -ForegroundColor Red
    }
}

$delete_service_by_execute_file_hash = $true
$malicious_service_file_hashs = (
   "3C2FE308C0A563E06263BBACF793BBE9B2259D795FCC36B953793A7E499E7F71"
)
#delete service by service execute file sha256 hash
if($delete_service_by_execute_file_hash){ 
    Try{ 
        $services = Get-WmiObject -Class Win32_Service
        ForEach($service in $services ){ 
            $service_name = $service.Name        
            $service_execute_path = $service.PathName

            #$service_name + " " + $service_execute_path | Out-Host
            if($service_execute_path -like '"*"'){
                $service_execute_path = $service_execute_path.Replace('"', "")
            }

            if($service_execute_path -like "%*%*"){ 
                $service_execute_path = [System.Environment]::ExpandEnvironmentVariables($service_execute_path)
            }

            if($service_execute_path){ 
                ForEach($malicious_service_file_hash in $malicious_service_file_hashs){ 
                    if(hash_and_compare -file_path $service_execute_path -compare_hash $malicious_service_file_hash){ 
                        if($service.State -eq "Running"){ 
                            $service.StopService() | Out-Null
                        }
                        $service.delete() | Out-Null

                        if(Test-Path -Path $service_execute_path){ 
                            Remove-Item -Path $service_execute_path -Confirm:$False -ErrorAction SilentlyContinue
                        }
                    }
                }
                
            }
        }
    }
    Catch{ 
        Write-Host "[-] Some thing wrong while delete service by service execute file hash." -BackgroundColor Black -ForegroundColor Red
    }
}
#**************************************************Deleted malicious service End Line**************************************************


#**************************************************Deleted malicious process by powershell!**************************************************
$kill_process_by_name = $true
$malicious_process_names = (
   "NsCpuCNMiner32"
)
if($kill_process_by_name){ 
    Try{ 
        ForEach($malicious_process_name in $malicious_process_names){ 
            $process  = Get-Process -Name $malicious_process_name -ErrorAction SilentlyContinue
            if($process){ 
                if($process.count -gt 1){ 
                    ForEach($ps in $process){ 
                        $ps.Kill()
                        $namepid = $ps.Name + " " + $ps.Id
                        
                        Write-Host "[+] Kill malicious process $namepid  successfully." -ForegroundColor Green -BackgroundColor Black
                    }
                }
                else{ 
                    $process.Kill()
                    $namepid = $malicious_process_name + " " + $process.Id
                    Write-Host "[+] Kill malicious process $namepid successfully." -ForegroundColor Green -BackgroundColor Black
                }
            }
        }
    }
    Catch{ 
        Write-Host "[-] Some thing wrong while kill process by name." -ForegroundColor Red -BackgroundColor Balck
    }
}

$kill_process_by_file_hash = $True
$malicious_process_filehashs = (
   "807126CBAE47C03C99590D081B82D5761E0B9C57A92736FC8516CF41BC564A7D"
)
if($kill_process_by_file_hash){ 
    Try{ 
        $process_all  = Get-Process
        ForEach($process in $process_all){ 
            ForEach($malicious_process_filehash in $malicious_process_filehashs){ 
                $process_path = $process.Path
                if($process_path){ 
                    if(hash_and_compare -file_path $process_path -compare_hash $malicious_process_filehash){ 
                        $namepid = $process.Name + " " + $process.Id
                        $process.Kill()
                        Write-Host "[+] Kill malicious process $namepid successfully." -ForegroundColor Green -BackgroundColor Black
                    }
                }
            }
        }
    }
    Catch{ 
        Write-Host "[-] Some thing wrong while kill process." -ForegroundColor Red -BackgroundColor Black
    }
}

$kill_process_by_commandline = $True
$malicious_process_commandlines = (
   "powershell*bypass*enc"
)
if($kill_process_by_commandline){ 
    Try{ 
        $processes = Get-WmiObject -Class Win32_Process
        ForEach($process in $processes){ 
            $commandline = $process.CommandLine
            if($commandline){ 
                $commandline = $process.CommandLine.Tolower()

                ForEach($malicious_process_commandline in $malicious_process_commandlines){
                    $lower_malicious_commandline = $malicious_process_commandline.Tolower()
                    $match = $commandline -like "*$lower_malicious_commandline*"
                    if($match){ 
                        Write-Host "[*] Found malicious process " $process.Name  " with pid " $process.ProcessID -ForegroundColor Green -BackgroundColor black
                        Stop-Process  -Id $process.ProcessID -Force -Confirm:$False
                        Write-Host "[+] Kill malicious process " $process.Name " with pid " $process.ProcessID " successfully." -ForegroundColor Green -BackgroundColor black
                        break
                    }
                }
            }
        }
    }
    Catch{ 
        Write-Host "[-] Some thing wrong while killing process by commandline."
    }
}
#**************************************************Kill malicious process End Line**************************************************


#**************************************************Deleted malicious files by powershell!**************************************************
$delete_file_by_filenames = $true
$malicious_file_names = (
   "C:\Users\binlmmhc\AppData\Local\Temp\pools.txt",
   "C:\Photo.scr"
)
#delete file by filenames
if($delete_file_by_filenames){ 
    Try{ 
        ForEach($malicious_file_name in $malicious_file_names){ 
            if(Test-Path -Path $malicious_file_name){ 
                Remove-Item -Path $malicious_file_name -Confirm:$false -ErrorAction SilentlyContinue
                Write-Host "[+] Delete $malicious_file_name successfully."  -ForegroundColor Green -BackgroundColor Black
            }
        }
    }
    Catch{ 
        Write-Host "[-] Some thing wrong while delete file by name" -ForegroundColor Red -BackgroundColor Black
    }
    
}

$delete_file_by_file_hash = $true
$malicious_file_namehashs = @{
   "C:\Users\binlmmhc\AppData\Local\Temp\NsCpuCNMiner32.exe"="A0EBA3FDA0D7B22A5D694105EC700DF7C7012DDC4AE611C3071EF858E2C69F08";
   "C:\Users\binlmmhc\Music\test.txt"="E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855"
}
#delete file by file namehash
if($delete_file_by_file_hash){ 
    Try{ 
        ForEach($filename in $malicious_file_namehashs.Keys){ 
            if(Test-Path -Path $filename){ 
                if(hash_and_compare -file_path $filename -compare_hash $malicious_file_namehashs[$filename]){ 
                    Remove-Item -Path $filename -Confirm:$false -ErrorAction SilentlyContinue
                    Write-Host "[+] Delete $filename by filehash successfully."  -ForegroundColor Green -BackgroundColor Black
                }
            }
        }
    }
    Catch{ 
        Write-Host "[-] Some thing wrong while delete file by file hash" -ForegroundColor Red -BackgroundColor Black
    }
}
#**************************************************Deleted malicious Files End Line**************************************************


#**************************************************Deleted malicious wmi by powershell!**************************************************
$delete_wmi_by_wmi_name = $True
$malicious_wmi_names = (
   "Updater"
)
if($delete_wmi_by_wmi_name){ 
    Try{ 
        ForEach($malicious_wmi_name in $malicious_wmi_names){
            $event_filter_binder = Get-WmiObject -Namespace root\subscription -Class __FilterToConsumerBinding | Where-Object {$_.Filter -like "*$malicious_wmi_name*"}
            $event_consumer_binder = Get-WmiObject -Namespace root\subscription -Class __FilterToConsumerBinding | Where-Object {$_.Consumer -like "*$malicious_wmi_name*"}
            $event_filter_consumer_binder = $null
            if($event_filter_binder){ 
                $event_filter_consumer_binder = $event_filter_binder
            }
            elseif($event_consumer_binder){
                $event_filter_consumer_binder = $event_consumer_binder
            }
            else{ 
                Write-Host "[*] Not Found malicious wmi $malicious_wmi_name" -ForegroundColor yellow -BackgroundColor black
                continue
            }
            Write-Host "[*] Found malicious wmi $malicious_wmi_name" -ForegroundColor Green -BackgroundColor black

            #get eventfilter_name and eventconsumer_name
            $event_filter_name = $event_filter_consumer_binder.Filter.Split('"')[1]
            $event_consumer_name = $event_filter_consumer_binder.Consumer.Split('"')[1]


            $event_filter = Get-WmiObject -Namespace root\subscription -Class __EventFilter -Filter "Name='$event_filter_name'"
            if($event_filter){ 
                Write-Host "[+] Delete $event_filter_name EventFilter successfully." -ForegroundColor Green -BackgroundColor black
                $event_filter | Remove-WmiObject
            }

            $event_consumer = Get-WmiObject -Namespace root\subscription -Class CommandLineEventConsumer -Filter "Name='$event_consumer_name'"
            if($event_consumer){ 
                Write-Host "[+] Delete $event_consumer successfully." -ForegroundColor Green -BackgroundColor black
                $event_consumer | Remove-WmiObject
            }

            Write-Host "[+] Delete $malicious_wmi_name FilterToConsumerBinding successfully." -ForegroundColor Green -BackgroundColor black
            $event_filter_consumer_binder | Remove-WmiObject
        }
    }
    Catch{ 
        Write-Host "[-] Some thing wrong while deleting wmi by name." -ForegroundColor Red -BackgroundColor black
    }
}

$delete_wmi_by_wmi_eventconsumer_commandline = $True
$malicious_wmi_eventconsumer_commandlines = (
   "powershell.exe*hidden*enc"
)
if($delete_wmi_by_wmi_eventconsumer_commandline){ 
    Try{ 
        $event_consumers = Get-WmiObject -Namespace root\subscription -Class CommandLineEventConsumer
        if($event_consumers){ 
             ForEach($malicious_wmi_eventconsumer_commandline in $malicious_wmi_eventconsumer_commandlines){ 
                ForEach($event_consumer in $event_consumers){ 
                    if($event_consumer.CommandLineTemplate){ 
                        $match = $event_consumer.CommandLineTemplate -like "*$malicious_wmi_eventconsumer_commandline*"
                        if($match){ 
                            $event_consumer_name = $event_consumer.Name
                            $event_filter = Get-WmiObject -Namespace root\subscription -Class __EventFilter -Filter "Name='$event_consumer_name'"
                            if($event_filter){ 
                                Write-Host "[+] Delete $event_consumer_name EventFilter successfully." -ForegroundColor Green -BackgroundColor black
                                $event_filter | Remove-WmiObject

                                $event_filter_consumer_binder = Get-WmiObject -Namespace root\subscription -Class __FilterToConsumerBinding | Where-Object {$_.Filter -like "*$event_consumer_name*"}
                                if($event_filter_consumer_binder){ 
                                    Write-Host "[+] Delete $event_consumer_name filter consumer binding successfully." -ForegroundColor Green -BackgroundColor black
                                    $event_filter_consumer_binder | Remove-WmiObject
                                }
                            }

                            Write-Host "[+] Delete $event_consumer successfully." -ForegroundColor Green -BackgroundColor black
                            $event_consumer | Remove-WmiObject
                        }    
                    }
                }
            }
        }
    }
    Catch{ 
        Write-Host "[-] Some thing wrong while deleting wmi by event consumer commandline." -ForegroundColor red -BackgroundColor black
    }
}
#**************************************************Kill malicious wmi End Line**************************************************

