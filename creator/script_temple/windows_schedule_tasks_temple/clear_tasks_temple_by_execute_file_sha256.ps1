$malicious_task_execute_file_hashs = (
    "807126CBAE47C03C99590D081B82D5761E0B9C57A92736FC8516CF41BC564A7D"
)

$sha256 = New-Object System.Security.Cryptography.SHA256Managed

Function hash_and_compare($file_path, $compare_hash){ 
    Try{ 
        $hashdata = [System.IO.File]::Open($file_path, "open", "read")

        $calchash = ""
        ForEach($i in $sha256.ComputeHash($hashdata) | %{$_.ToString("x2")}){
             $calchash += $i 
        }
        $calchash | Out-Host

        $hashdata.dispose()
        
        if($calchash.toupper() -eq $compare_hash.touppper()){ 
            return $TRUE
        }

        return $FALSE
    }
    Catch{ 
        Write-Verbose "[-]Something Wrong while Matching."
        return $FALSE
    }
}

$task_root = "C:\Windows\System32\Tasks"
$task_files = Get-ChildItem -Path $task_root -Recurse

$count = 1
ForEach($task_file in $task_files){
    ForEach($malicious_task_file_hash in $malicious_task_execute_file_hashs){
        if($task_file.GetType().Name -eq "FileInfo"){ 
            $task_file_data = [XML](Get-Content $task_file.FullName)
            $task_execute_command = $task_file_data.Task.Actions.Exec.Command

            if($task_execute_command -like '"*"'){
                $task_execute_command = $task_execute_command.Replace('"', "")
            }

            if($task_execute_command -like "%*%*"){ 
                $task_execute_command = [System.Environment]::ExpandEnvironmentVariables($task_execute_command)
            }

            if($task_execute_command){ 
                $count.ToString() + " " + $task_file.FullName + " " + $task_execute_command | Out-Host
                $count++
            }

            if(hash_and_compare -file_path $task_execute_command -compare_hash $malicious_task_file_hash){ 
                $task_name = $task_file.Parent + "\" + $task_file.BaseName
                if(Test-Path -Path ($task_root + "\" + $task_name)){ 
                    schtasks /Delete /TN $task_name
                }
                if(Test-Path -Path $task_execute_command){ 
                    Remove-Item -Path $task_execute_command -Confirm:$False
                }
            }
        }
    }
}